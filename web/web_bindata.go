// Code generated by forge bindata.
// sources:
// index.html
// DO NOT EDIT!

package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x6d\x6f\xe3\x36\x12\xfe\xee\x5f\x31\x47\xdc\xc1\x76\xe3\x97\x24\xdd\x6c\xb7\x8a\x2d\xa0\x4d\x83\x6b\xef\xba\x49\x91\x64\x71\x38\x2c\x16\x2d\x2d\x8d\x6d\x6e\x68\x52\x20\xa9\x78\xdd\x22\x1f\xee\x27\xde\x3f\x3a\x90\x7a\x31\x25\x4b\xb1\x37\xbb\xed\x35\x40\xe2\x88\x1c\x0e\x9f\x99\x79\x66\x38\xa2\x27\x7f\xf9\xee\xfa\xe2\xee\xdf\x3f\x5d\xc2\xd2\xac\x78\xd8\x99\xac\xd0\x50\x88\x96\x54\x69\x34\x53\x92\x9a\xf9\xf0\x15\x19\x87\x9d\x89\x61\x86\x63\xf8\x2f\x9c\xdd\xca\xe8\x1e\x0d\xdc\xa1\x36\x93\x71\x36\xda\x99\x68\xb3\xe1\x08\x9c\x8a\xc5\x94\x44\x5a\x93\xb0\x03\x30\x93\xf1\x06\x7e\xeb\x00\x00\xcc\x68\x74\xbf\x50\x32\x15\xf1\x30\x92\x5c\xaa\x00\xd4\x62\xd6\x7b\xf1\xd5\x00\xce\x4e\x06\x70\x76\xd6\x3f\x77\x62\xde\xdc\xc9\x97\x5f\x0d\xe0\xe4\xcb\x13\xf7\x27\x9f\x9e\x4b\x61\x86\x9a\xfd\x8a\x01\x70\xaa\x16\xa8\xce\x3b\x1d\x80\x47\xfb\x67\x79\x32\x80\xe5\x69\xbe\x9b\xc1\x0f\x66\x48\x39\x5b\x88\x00\x22\x14\xc6\x0a\xe6\x72\xd4\x17\x89\x31\x92\x8a\x1a\x26\x85\x8f\xea\xe4\xe5\xd9\x00\x4e\x5f\xd8\x3f\x8d\xc0\x1a\xa6\xd7\x2c\x36\xcb\x00\x4e\x8e\x8f\xff\x76\xbe\x55\x2f\x1f\x50\xcd\xb9\x5c\x07\x80\x9c\xb3\x44\x33\x9d\x4b\x2f\x99\xc1\xa1\x4e\x68\x84\x01\x08\xb9\x56\x34\xc9\x26\xb6\x0b\x96\x2c\x8e\x51\x94\xa8\x99\x48\x52\x53\xb8\x52\xaa\x18\xd5\x50\xd1\x98\xa5\x3a\x80\xe3\x73\x6f\x34\x80\x85\xa2\x9b\x6c\xe4\x7d\xaa\x0d\x9b\x6f\x86\x91\x14\x06\x85\xf1\x3d\xd1\x14\x0f\xa3\xa8\xd0\x09\x55\x28\x8c\xaf\x71\x38\x93\xc6\xc8\xd5\xd0\xc5\x37\x00\xc5\xe2\x05\xee\x04\x43\xaf\x28\xe7\x85\xea\x27\x9c\x3f\x9a\xa5\xc6\x48\x91\x1b\xd2\xa6\x60\x17\x5b\x4c\xd5\xbd\xe6\xd4\xe0\x42\xe1\xa6\x82\x2e\x87\xb5\x50\x52\x3e\xe4\xb8\xa2\x54\x69\xbb\x28\x91\x6c\x6b\xef\x8a\xaa\x05\x13\x01\xbc\x48\x72\xeb\x12\x1a\xc7\x4c\x2c\xdc\x08\xbc\xcc\x46\x33\x8c\x2b\xca\x84\x73\x1a\x65\x02\x55\x8e\x75\xc5\xc4\x30\x0f\xf2\xab\xe3\xe3\xe4\x43\x55\xeb\x31\xd0\xd4\xc8\x9a\xe2\xd3\x52\x2c\x66\x3a\xe1\x74\x13\xc0\x9c\x63\x3e\x64\xff\x1b\xc6\x4c\x61\x64\xd9\x17\x58\x7e\xa5\x2b\xd1\x12\x38\xc7\x94\x21\x75\x2e\xd9\x32\x7e\xb4\xa2\x82\x2e\x70\x85\xc2\x0c\x67\x5c\x46\xf7\x39\xd4\x03\x76\x53\x72\xdd\xc0\xdb\x52\x31\x3e\xd4\x75\x6e\x43\x92\xe5\xc0\xd9\xab\x01\xbc\xfc\x72\x00\x2f\xbf\xee\x57\x99\x3b\xb4\x64\x0e\x60\xa6\x90\xde\x0f\xd7\x52\xc5\xcf\xf2\x40\xe1\xd7\x93\xd3\x9d\x70\x6d\x87\x5a\xdc\x34\x43\xb3\x46\x2f\x75\x72\x6b\x96\x48\x63\x17\xcd\x72\x7c\xce\x90\xc7\x1f\xed\x33\x6f\xed\x50\xd0\x15\xe6\x0a\x2a\x74\x2a\x7e\x8f\x77\xb8\xe7\xff\x56\x23\x50\xb0\xc5\xd7\xff\x40\x79\xfa\x89\x1b\x64\xea\xa8\xb3\x61\xa8\xe4\x3a\xd7\x76\xa8\xef\x38\x13\xf7\x43\x4e\x67\xc8\xfd\xb2\xf9\x59\xea\x9a\x85\xfd\xa1\xc8\xa9\xd3\x93\x33\xdf\x7c\x6d\x23\xe6\x6f\xeb\xd5\x81\x85\xaa\x46\x57\x29\xa9\xda\x64\x15\xc6\x5b\xc9\xf7\x5a\x8a\x61\x4c\x4d\x71\x02\x54\xd0\x26\x0a\x87\x05\xde\xc7\xce\x64\xec\xea\x4a\xd8\xe9\x4c\x74\xa4\x58\x62\xc0\x6c\x12\x9c\x12\x6b\xfd\xf8\x3d\x7d\xa0\xd9\xa8\x3b\xe4\x00\x38\x1a\x48\xe8\x02\x6f\x0d\x35\x08\xd3\x5c\xbd\xdb\x42\xbf\x51\x2c\x00\xb2\xd6\xc1\x78\xcc\x65\x44\xf9\x52\x6a\x13\xbc\x3a\xfe\xfa\x98\x0c\x3c\xa9\xdb\x74\x3e\x67\x1f\x02\x20\xe3\x9f\xd7\x7a\xac\xd3\x99\xd5\x3f\x43\x4f\x86\xa6\xd6\x4d\x5b\xcd\x2e\x16\xf2\x1e\x45\x00\xc4\x13\xb3\x3f\x4a\xda\x8a\x48\x52\x8d\xaa\x36\x23\x15\x73\x3c\xa9\xcf\x3d\x7a\x58\x70\xa6\xdd\xf1\x1e\x80\x48\x39\xdf\x4e\xc8\xd4\x24\xe9\xce\x68\xc4\x91\x8a\x37\xc9\x0f\xb6\xd0\x3e\x50\xee\x4f\x3f\xba\x82\x02\x30\x4f\x85\x63\x1f\xb8\x3c\x7c\xad\x17\x77\xf2\xfb\xbb\xd7\x3f\xf6\xdc\xe3\x3f\x99\x88\x07\x60\x83\xd2\xf7\x8c\xb3\x0e\x35\x74\xc6\xad\x33\xbb\x93\x98\x3d\x40\xc4\xa9\xd6\x53\x92\xa5\xf2\x7f\xff\x93\xb1\x96\x84\xdd\xf3\x72\xcd\x5c\x2a\xe8\xd9\x85\xf7\xb8\x01\x26\x76\x74\x3a\x87\x39\x9d\x47\x35\xa5\x2e\xd7\x2a\xba\xf6\xc8\xba\xbc\x27\x21\x4c\x66\x61\x17\x8e\xdc\x86\x47\x40\x82\xc9\x78\x16\x4e\xc6\x31\x7b\x08\x49\x55\x15\x9b\x43\xcf\xf2\x47\xce\x1d\xaa\xb7\xf7\xb8\x79\x07\xd3\x29\x74\xe5\xec\x3d\x46\xa6\x5b\x87\xb9\x6f\xfb\xac\x2c\x94\x74\x26\x0e\xc5\x3f\x6e\xaf\xaf\x46\xda\x28\x26\x16\x6c\xbe\xe9\x95\x1b\x0d\x20\x15\x31\xce\x99\xc0\x78\x00\x2f\xfa\x16\x69\x23\xc8\x47\x40\xae\xf1\x39\x48\xb2\xfd\xb7\x96\xb5\xee\xd0\xe6\x5f\x27\xec\xb9\x7f\x2b\xd8\x20\x54\xce\x29\x34\xa9\x12\x4d\xfc\xc8\x4a\xbd\x0d\x90\x4e\xa8\x28\xe6\xb6\x35\x85\x84\x60\x11\x97\x04\x84\x23\xe8\x06\x30\x19\x5b\xe9\x10\xf2\x9d\xe0\x28\xdb\x3d\xe3\x72\x8d\xca\x6b\xc5\x0c\xde\xc9\xdb\xc8\xd6\xa2\xde\x0a\xb5\xa6\x0b\xac\x33\x38\x51\x96\xbf\xb1\x8c\x52\x7b\x44\x8f\x22\x85\xd4\xe0\x25\x77\x07\x76\x8f\xc4\xec\x81\xf4\xb7\x36\x27\x0a\x47\x1a\xcd\x37\xc6\x28\x36\x4b\x0d\xf6\xba\x0e\x76\x77\x00\x5d\xff\x34\xc6\x87\x6e\x6d\x11\x13\x02\x95\x4d\x28\x98\x42\x0e\xc4\x13\x28\xaa\xd2\x28\x4b\xdf\x51\xa2\x30\x41\x11\xf7\x12\x85\xb9\x9e\xba\x69\xb1\xbc\xb5\x02\x0d\x36\x55\x8d\xae\x65\x33\xb9\xbd\xbc\xba\x23\x83\x02\x42\xbf\xdf\x04\xa2\x2c\x2e\xb6\xc0\xc7\xbd\x1a\x65\x6b\x4b\x1f\x3b\x35\x64\x52\x5c\x27\x6e\x63\xd3\x8e\x8a\x5c\x5c\x5f\x5d\x5d\x5e\xdc\x5d\x7e\xe7\x3b\xd7\x46\xc3\xa6\x4b\xa5\x36\xdb\x9f\x68\x49\x85\x40\xee\x2a\xf4\xcf\xda\x50\x93\xea\x5a\xc9\x74\x66\x06\x40\x96\x54\xc4\x7a\x49\xef\x91\x6c\x69\xea\x91\x31\xf7\x9a\xdd\xa4\xef\x0d\xef\x03\x57\x77\xbe\x14\x97\xf6\x38\x7b\xda\xc6\x6e\x85\xd6\xde\xf9\x47\xc2\xcb\x9b\x9b\xeb\x9b\xa0\x60\x72\x46\x72\x33\x72\xa5\xb0\x6d\xc3\x0b\x2e\x35\xee\x71\xea\x77\x3f\xdc\x1e\x00\xfd\x75\x16\xbf\xba\x2e\xeb\x7c\x85\x3a\x91\x42\xdb\x7c\x70\x41\x4f\xec\xcb\x65\xaf\xc4\xd6\xe6\xb0\x1a\xc7\xba\x37\x97\xb7\x3f\x5d\x5f\xdd\x5e\x76\x07\xa5\xc6\xbe\xef\x6e\x5b\x68\x8b\x89\xac\xed\x83\xe9\x74\x0a\x24\x61\x62\x41\xea\x55\xb6\x95\x14\x7e\xd8\x13\x29\x16\x35\x46\xb4\xf1\xa6\x5a\xeb\xaa\xa5\xaf\x4a\x8f\x52\xa8\xd3\x4c\xf4\x48\x0a\x81\x91\xe9\xf9\x88\xcb\x32\xb2\x40\x93\xd7\x90\x6f\x37\x3f\xc4\x3d\x92\x2a\x6e\xcb\x30\xe9\x67\x95\xe0\x0e\x3f\x18\x98\xfa\x39\x67\x5b\x90\xf3\xfd\x7a\x5c\x33\x41\xfa\xa3\xec\x70\xf1\x35\xd8\xd6\x63\xe4\xa6\x0f\x50\x63\x9b\x8f\x76\x2d\x76\xf6\x00\x25\x59\x9f\xd2\xae\x26\x9b\xf7\x02\x5f\xaf\x73\x7e\xdd\xdd\x51\xee\x24\xc8\xd3\x05\x0a\xa6\x20\x70\x0d\xe5\x65\x47\xaf\xe6\x50\x38\xaa\xb8\x38\xeb\xdf\xf6\xd4\x3c\x29\x64\x82\x96\x6e\x59\x21\xdb\x23\x1b\xd9\xbc\x74\xc2\x2e\x43\xf7\x48\xe7\xb5\xd3\xc9\xe7\x79\xb8\x67\x85\xab\x1b\x4e\xde\x95\x9c\x16\x26\x66\xed\x5d\xaf\x9e\xcf\x2e\x3d\x74\xb3\x97\xf5\xb7\x9b\x0b\x5b\x9a\xae\xe8\x0a\x7b\xdd\xea\x81\xb5\x5e\x32\x8e\x90\xe5\xb5\x7e\x7b\xfc\xae\x9e\x93\xe5\xc4\x28\xbb\x88\xb8\x92\x31\x8e\x14\xae\xe4\x03\x5e\x2c\x19\x8f\xbd\x95\xb5\x6e\x61\x07\xba\x46\xf3\x46\xf1\x0a\xf2\x7a\x0c\x9f\x20\x49\xaa\x78\x41\xbf\x46\x9a\x6d\x3d\xe9\xe2\xd4\xeb\xef\x23\x53\xca\x79\xa7\x53\x6f\x9b\x7b\x9e\x6b\xca\xa4\x6f\x39\xfd\x2c\xf1\xa5\x62\xbf\xe2\x4e\x30\x5c\x6a\x3e\x65\x4c\x25\xb5\xab\xa7\x62\x96\x49\x4f\xa6\x4b\x25\x17\xab\xab\x6d\x3a\x3f\xb5\xd6\x2f\x06\x8d\x6e\xb4\x46\xd9\xfa\xeb\x10\x0e\x72\x34\x03\xa7\xb7\xe1\x74\x7d\xee\xd9\x5d\xba\xae\x36\x1f\xc9\xd5\x8a\x8a\x38\x68\xde\xdf\x7b\x3d\x6a\x39\xf2\xca\xf7\xb4\x9d\x90\xe4\xd8\x9e\xf2\x4d\x2e\xd2\xec\xd8\xfc\xec\x6a\x5f\xed\x04\x3c\xd7\x7e\x2e\x57\x35\xbd\x7a\x56\x5d\x95\xeb\x1a\x64\x4b\x0e\xf0\xd2\xca\x76\xb3\x8d\x05\x64\xaf\x81\x43\x23\x87\x76\x79\x03\x87\x3e\xd1\x4e\xa7\xb5\xcd\xc4\x43\x2d\x5b\xa0\xb9\xa0\xd1\x12\x6b\x07\xf5\x27\x01\x8b\xac\xc2\x56\x64\x3b\x8d\x08\x89\x4c\x32\x12\xd2\xb0\x39\x8b\xdc\x3d\xb6\x1e\xb9\x7b\x51\x4d\x76\xef\x05\x5a\xe4\x69\x14\xc9\x54\x98\xa6\x15\x8f\x6d\x2e\xd0\x6b\x66\xa2\x25\xf4\xd6\x4c\xc4\x72\x3d\xe2\x32\x53\x36\x4a\x94\x34\x32\x92\xdc\x77\x48\x44\x35\x42\x77\x69\x4c\x12\x74\xeb\x26\xec\x56\xe4\x5f\xdc\x55\xc9\x5f\x7f\xab\x6b\x5e\x4a\x6d\x1e\x7f\xa9\xb9\x45\x68\xc9\x71\xc4\xe5\xa2\x47\xac\x7e\xd2\xaf\xcc\xbb\x3b\xc8\x86\x97\xca\x2d\x20\x7d\x20\xa2\xe7\x43\xd2\x07\x60\xca\x7d\x9a\xab\xa7\x71\x7c\x69\xb9\xf0\x23\xd3\x06\x05\xaa\x1e\xe1\x92\xc6\x64\x50\x1c\x10\x03\x98\x53\xae\xed\xdb\x5b\x67\x32\xce\xae\xa1\xc2\x4e\xc7\x7f\x09\xae\xde\x5f\xbb\x3b\xaa\xc9\xf2\x34\xfc\x1e\xd5\x0a\x35\x54\xbf\xbf\x81\x9f\xe8\x02\x27\xe3\xe5\x69\x68\x41\x54\xb5\x54\x2f\x97\xf3\xbb\xae\xdd\xb7\x6d\x7f\xb6\x3a\x9f\x5f\xac\x94\xe6\xb6\x5d\xa4\x4c\xb2\xdb\xbb\xb9\x54\x53\x77\xf0\x86\x6f\x6e\x7e\x9c\x8c\xdd\x60\x7e\xa1\xb2\x55\x91\x7d\x11\xc2\xe2\x4c\xb2\xf1\x36\xa2\x40\xe2\xaf\xfc\x0c\xb0\x5c\x97\x1d\x5e\xa4\xca\x36\x26\x6d\xf0\xb2\x25\x39\x3c\xb7\xa2\xe9\xea\x66\x7b\xab\x4a\x42\x78\x2b\xa4\xb1\xdd\xca\x3b\x28\x94\x56\x0d\x68\xb3\x00\xb6\x97\xba\xbe\x31\xf9\x37\x2c\xb9\x64\xf6\x44\xc0\xf6\x93\x2c\xba\x9f\x92\xb2\xf3\x20\x21\x5c\xd8\xff\xc1\xb1\x4d\x4f\xc6\x99\xe8\xe1\x9a\x8a\x06\x8b\x84\x70\x8b\xa6\xbe\xde\x73\x8c\x6f\xc7\xef\x4d\x9f\xac\xd5\x09\xef\xec\xc7\x7e\x0a\x65\xd2\x7f\x18\x89\xf2\x56\x2a\xbc\x76\x9f\xfb\xe1\xe5\xf2\x7f\x18\x3e\xd7\xae\x85\x37\x92\xe3\x7e\x6c\x4e\xf6\xf9\xc8\x9e\x47\x5e\xaf\x07\x26\x21\x7c\x53\x3c\xfd\x49\xb8\x57\x74\x74\xe1\x45\x7e\xda\xef\xf7\x62\xb1\xa4\xc9\x91\xe0\x3e\xa6\xe4\x8b\x2f\xbe\xf8\x7d\xc2\x9d\xf5\x90\xa1\xcb\xff\x03\xb0\x66\xe2\x1f\x89\xf4\xf3\xc6\x7f\xdb\x70\x91\xf0\xef\x68\xc0\x3d\x6c\xa3\x7f\x78\xe9\xda\x36\xee\xb6\x7a\x15\x4f\x7f\x12\x1e\x55\x5b\xdf\x8f\x8b\x4f\xb9\xec\xff\x1a\xa7\xac\xe5\x27\x21\xbc\x4e\xcd\x61\x5e\x2d\x07\x27\x33\x15\x16\x9d\x88\xab\x81\xd9\x6d\x4d\x61\x77\xb1\xe2\x7f\x01\x00\x00\xff\xff\x9b\x80\x82\x58\xb5\x22\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 8885, mode: os.FileMode(420), modTime: time.Unix(1588925420, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

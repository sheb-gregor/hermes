// Code generated by forge bindata.
// sources:
// index.html
// DO NOT EDIT!

package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x6d\x6f\xe3\x36\x12\xfe\xee\x5f\x31\x47\xdc\xc1\x76\xe3\x97\x24\x6d\xb6\x5b\xc5\x16\xd0\x66\x83\xeb\xde\xed\x26\x8b\x24\x8b\xc3\x61\xb1\x68\x69\x69\x2c\x73\x43\x93\x02\x49\xc5\xeb\x16\xf9\x70\x3f\xf1\xfe\xd1\x81\x94\x64\x53\xb2\x14\xbb\xe9\xb6\xb8\x00\x79\x31\x39\x1c\x3e\x33\xf3\xcc\x70\xc8\x4c\xfe\xf2\xea\xfa\xe2\xee\xdf\xef\x2e\x61\x61\x96\x3c\xec\x4c\x96\x68\x28\x44\x0b\xaa\x34\x9a\x29\xc9\xcc\x7c\xf8\x92\x8c\xc3\xce\xc4\x30\xc3\x31\xfc\x17\xce\x6e\x65\x74\x8f\x06\xee\x50\x9b\xc9\x38\x1f\xed\x4c\xb4\x59\x73\x04\x4e\x45\x32\x25\x91\xd6\x24\xec\x00\xcc\x64\xbc\x86\x5f\x3b\x00\x00\x33\x1a\xdd\x27\x4a\x66\x22\x1e\x46\x92\x4b\x15\x80\x4a\x66\xbd\x6f\xbe\x1d\xc0\xd9\xc9\x00\xce\xce\xfa\xe7\x4e\xcc\x9b\x3b\xf9\xfa\xdb\x01\x9c\x7c\x7d\xe2\x7e\x14\xd3\x73\x29\xcc\x50\xb3\x5f\x30\x00\x4e\x55\x82\xea\xbc\xd3\x01\x78\xb4\x3f\x16\x27\x03\x58\x9c\x16\xbb\x19\xfc\x6c\x86\x94\xb3\x44\x04\x10\xa1\x30\x56\xb0\x90\xa3\xbe\x48\x8c\x91\x54\xd4\x30\x29\x7c\x54\x27\x2f\xce\x06\x70\xfa\x8d\xfd\xd1\x08\xac\x61\x7a\xc5\x62\xb3\x08\xe0\xe4\xf8\xf8\x6f\xe7\x5b\xf5\xf2\x01\xd5\x9c\xcb\x55\x00\xc8\x39\x4b\x35\xd3\x85\xf4\x82\x19\x1c\xea\x94\x46\x18\x80\x90\x2b\x45\xd3\x7c\x62\xbb\x60\xc1\xe2\x18\xc5\x06\x35\x13\x69\x66\x4a\x57\x4a\x15\xa3\x1a\x2a\x1a\xb3\x4c\x07\x70\x7c\xee\x8d\x06\x90\x28\xba\xce\x47\x3e\x65\xda\xb0\xf9\x7a\x18\x49\x61\x50\x18\xdf\x13\x4d\xf1\x30\x8a\x0a\x9d\x52\x85\xc2\xf8\x1a\x87\x33\x69\x8c\x5c\x0e\x5d\x7c\x03\x50\x2c\x4e\x70\x27\x18\x7a\x49\x39\x2f\x55\x3f\xe1\xfc\xd1\x2c\x33\x46\x8a\xc2\x90\x36\x05\xbb\xd8\x62\xaa\xee\x35\xa7\x06\x13\x85\xeb\x0a\xba\x02\x56\xa2\xa4\x7c\x28\x70\x45\x99\xd2\x76\x51\x2a\xd9\xd6\xde\x25\x55\x09\x13\x01\x7c\x93\x16\xd6\xa5\x34\x8e\x99\x48\xdc\x08\xbc\xc8\x47\x73\x8c\x4b\xca\x84\x73\x1a\x65\x02\x55\x81\x75\xc9\xc4\xb0\x08\xf2\xcb\xe3\xe3\xf4\x73\x55\xeb\x31\xd0\xcc\xc8\x9a\xe2\xd3\x8d\x58\xcc\x74\xca\xe9\x3a\x80\x39\xc7\x62\xc8\xfe\x35\x8c\x99\xc2\xc8\xb2\x2f\xb0\xfc\xca\x96\xa2\x25\x70\x8e\x29\x43\xea\x5c\xb2\x65\xfc\x68\x49\x05\x4d\x70\x89\xc2\x0c\x67\x5c\x46\xf7\x05\xd4\x03\x76\x53\x72\xd5\xc0\xdb\x8d\x62\x7c\xa8\xeb\xdc\x86\x24\xcf\x81\xb3\x97\x03\x78\xf1\xf5\x00\x5e\x7c\xd7\xaf\x32\x77\x68\xc9\x1c\xc0\x4c\x21\xbd\x1f\xae\xa4\x8a\x9f\xe5\x81\xd2\xaf\x27\xa7\x3b\xe1\xda\x0e\xb5\xb8\x69\x86\x66\x85\x5e\xea\x14\xd6\x2c\x90\xc6\x2e\x9a\x9b\xf1\x39\x43\x1e\xff\x66\x9f\x79\x6b\x87\x82\x2e\xb1\x50\x50\xa1\x53\xf9\x7d\xbc\xc3\x3d\xff\xbb\x1a\x81\x92\x2d\xbe\xfe\x07\xca\xb3\xdf\xb9\x41\xae\x8e\x3a\x1b\x86\x4a\xae\x0a\x6d\x87\xfa\x8e\x33\x71\x3f\xe4\x74\x86\xdc\x2f\x9b\x5f\xa4\xae\x59\xd8\x9f\xcb\x9c\x3a\x3d\x39\xf3\xcd\xd7\x36\x62\xfe\xb6\x5e\x1d\x48\x54\x35\xba\x4a\x49\xd5\x26\xab\x30\xce\x25\x27\x63\x57\x28\xc2\x4e\x67\xa2\x23\xc5\x52\x03\x66\x9d\xe2\x94\x58\x73\xc6\x9f\xe8\x03\xcd\x47\xdd\xa9\x05\xc0\xd1\x40\x4a\x13\xbc\x35\xd4\x20\x4c\x0b\xbd\xce\x42\xfd\x5e\xb1\x00\xc8\x4a\x07\xe3\x31\x97\x11\xe5\x0b\xa9\x4d\xf0\xf2\xf8\xbb\x63\x32\xf0\xa4\x6e\xb3\xf9\x9c\x7d\x0e\x80\x8c\x7f\x5a\xe9\xb1\xce\x66\x56\xff\x0c\x3d\x19\x9a\x59\xbb\xb7\x9a\x9d\x73\xe5\x3d\x8a\x00\x88\x27\x66\xbf\x94\xb4\x25\x8e\x64\x1a\x55\x6d\x46\x2a\xe6\x02\x5f\x9f\x7b\xf4\xb0\xe0\x4c\xbb\xf3\x3a\x00\x91\x71\xbe\x9d\x90\x99\x49\xb3\x9d\xd1\x88\x23\x15\xef\xd3\xd7\xb6\x72\x3e\x50\xee\x4f\x3f\xba\x0a\x01\x30\xcf\x84\xa3\x13\xb8\xc4\x7a\xab\x93\x3b\xf9\xe3\xdd\xdb\x37\x3d\xf7\xf1\x9f\x4c\xc4\x03\x88\xa9\xa1\x7d\xcf\x38\xeb\x50\x43\x67\xdc\x3a\xb3\x3b\x89\xd9\x03\x44\x9c\x6a\x3d\x25\x79\x6e\xfe\xf7\x3f\x39\x0d\x49\xd8\x3d\xdf\xac\x99\x4b\x05\x3d\xbb\xf0\x1e\xd7\xc0\xc4\x8e\x4e\xe7\x30\xa7\xf3\xa8\xa6\xd4\x25\x4f\x45\xd7\x1e\x59\x97\xc8\x24\x84\xc9\x2c\xec\xc2\x91\xdb\xf0\x08\x48\x30\x19\xcf\xc2\xc9\x38\x66\x0f\x21\xa9\xaa\x62\x73\xe8\x59\xfe\xc8\xb9\x43\xf5\xe1\x1e\xd7\x1f\x61\x3a\x85\xae\x9c\x7d\xc2\xc8\x74\xeb\x30\xf7\x6d\xef\xf2\x9c\xb8\xbd\xff\x71\x7b\x7d\x35\xd2\x46\x31\x91\xb0\xf9\xba\xb7\x51\x3f\xc8\x03\x01\xdd\x6e\xdf\x62\x6b\x84\xf5\x08\xc8\x35\x3e\x7f\xef\xad\x2d\xad\x3b\xb4\x79\xd4\x09\x7b\x0e\xdf\x0a\x36\x08\x6d\xe6\x14\x9a\x4c\x89\x26\x46\xe4\xd5\xda\x86\x44\xa7\x54\x94\x73\xdb\xb2\x40\x42\xb0\x88\x37\x94\x83\x23\xe8\x06\x30\x19\x5b\xe9\x10\x8a\x9d\xe0\x28\xdf\x3d\x67\x6f\x8d\xbc\x2b\xc5\x0c\xde\xc9\xdb\xc8\x96\x93\xde\x12\xb5\xa6\x09\xd6\x39\x9b\x2a\xcb\xd8\x58\x46\x99\x3d\x65\x47\x91\x42\x6a\xf0\x92\xbb\x33\xb7\x47\x62\xf6\x40\xfa\x5b\x9b\x53\x85\x23\x8d\xe6\x7b\x63\x14\x9b\x65\x06\x7b\x5d\x07\xbb\x3b\x80\xae\x7f\xa0\xe2\x43\xb7\xb6\x88\x09\x81\xca\xa6\x10\x4c\xa1\x00\xe2\x09\x94\x75\x68\x94\x27\xec\x28\x55\x98\xa2\x88\x7b\xa9\xc2\x42\x4f\xdd\xb4\x58\xde\x5a\x81\x06\x9b\xaa\x46\xd7\xf2\x97\xdc\x5e\x5e\xdd\x91\x41\x09\xa1\xdf\x6f\x02\xb1\x29\x27\xb6\x46\xc7\xbd\x1a\x5d\x6b\x4b\x1f\x3b\x35\x64\x52\x5c\xa7\x6e\x63\xd3\x8e\x8a\x5c\x5c\x5f\x5d\x5d\x5e\xdc\x5d\xbe\xf2\x9d\x6b\xa3\xf1\x49\x4b\x51\xa9\xc6\xf6\x2b\x5a\x50\x21\x90\xbb\x9a\xfc\x93\x36\xd4\x64\xba\x56\x24\x9d\x99\x01\x90\x05\x15\xb1\x5e\xd0\x7b\x24\x5b\x9a\x7a\x64\x2c\xbc\x66\x37\xe9\x7b\xc3\xfb\xc0\xd5\x9d\x2f\xc5\xa5\x3d\x91\x9e\xb6\xb1\x5b\xa1\xb5\x77\x84\x91\xf0\xf2\xe6\xe6\xfa\x26\x28\x99\x9c\x93\xdc\x8c\x5c\xf1\x6b\xdb\xf0\x82\x4b\x8d\x7b\x9c\xfa\xea\xf5\xed\x01\xd0\xdf\xe6\xf1\xab\xeb\xb2\xce\x57\xa8\x53\x29\xb4\xcd\x07\x17\xf4\xd4\xde\x0f\x7b\x1b\x6c\x6d\x0e\xab\x71\xac\x7b\x73\x79\xfb\xee\xfa\xea\xf6\xb2\x3b\xd8\x68\xec\xfb\xee\xb6\xa5\xb5\x9c\xc8\x3b\x37\x98\x4e\xa7\x40\x52\x26\x12\x52\xaf\xab\xad\xa4\xf0\xc3\x9e\x4a\x91\xd4\x18\xd1\xc6\x9b\x6a\xad\xab\x96\xbe\x2a\x3d\x36\x42\x9d\x66\xa2\x47\x52\x08\x8c\x4c\xcf\x47\xbc\x29\x23\x09\x9a\xa2\x86\xfc\xb0\x7e\x1d\xf7\x48\xa6\xb8\x2d\xc3\xa4\x9f\x57\x82\x3b\xfc\x6c\x60\xea\xe7\x9c\x6d\x3a\xce\xf7\xeb\x71\xed\x03\xe9\x8f\xf2\xb6\xd1\xd7\x60\x9b\x8d\x91\x9b\x3e\x40\x8d\x6d\x37\xda\xb5\xd8\xd9\x03\x94\xe4\x9d\x49\xbb\x9a\x7c\xde\x0b\x7c\xbd\xce\xf9\x75\x77\x47\xb9\x93\x20\x4f\x17\x28\x98\x82\xc0\x15\x6c\xde\x2b\x7a\x35\x87\xc2\x51\xc5\xc5\x79\xc7\xb6\xa7\xe6\x49\x21\x53\xb4\x74\xcb\x0b\xd9\x1e\xd9\xc8\xe6\xa5\x13\x76\x19\xba\x47\xba\xa8\x9d\x4e\xbe\xc8\xc3\x3d\x2b\x5c\xdd\x70\xf2\xae\xe4\xb4\x30\x31\x6f\xe8\x7a\xf5\x7c\x76\xe9\xa1\x9b\xbd\xac\x7f\x58\x5f\xd8\xd2\x74\x45\x97\xd8\xeb\x56\x0f\xac\xd5\x82\x71\x84\x3c\xaf\xf5\x87\xe3\x8f\xf5\x9c\xdc\x4c\x8c\xf2\xb7\x84\x2b\x19\xe3\x48\xe1\x52\x3e\xe0\xc5\x82\xf1\xd8\x5b\x59\xeb\x16\x76\xa0\x6b\x34\xef\x15\xaf\x20\xaf\xc7\xf0\x09\x92\x64\x8a\x97\xf4\x6b\xa4\xd9\xd6\x93\x2e\x4e\xbd\xfe\x3e\x32\x65\x9c\x77\x3a\xf5\x46\xb9\xe7\xb9\x66\x93\xf4\x2d\xa7\x9f\x25\xbe\x54\xec\x17\xdc\x09\x86\x4b\xcd\xa7\x8c\xa9\xa4\x76\xf5\x54\xcc\x33\xe9\xc9\x74\xa9\xe4\x62\x75\xb5\x4d\xe7\xa7\xd6\xfa\xc5\xa0\xd1\x8d\xd6\x28\x5b\x7f\x1d\xc2\x41\x81\x66\xe0\xf4\x36\x9c\xae\xcf\x3d\xbb\x37\xae\xab\xcd\x47\x72\xb9\xa4\x22\x0e\x9a\xf7\xf7\x2e\x44\x2d\x47\xde\xe6\x66\xb6\x13\x92\x02\xdb\x53\xbe\x29\x44\x9a\x1d\x5b\x9c\x5d\xed\xab\x9d\x80\xe7\xda\x2f\xe5\xaa\xa6\xcb\x66\xd5\x55\x85\xae\x41\xbe\xe4\x00\x2f\x25\x68\x2e\x68\xb4\xc0\xda\x71\xf6\xbb\x60\x46\x56\x61\x2b\xc4\x9d\xe3\x9a\x44\x26\x1d\x09\x69\xd8\x9c\x45\xee\xc1\x56\x8f\xdc\x03\xa0\x26\xbb\xf7\xe5\x16\x79\x1a\x45\x32\x13\xa6\x69\xc5\x63\x9b\x0b\xf4\x8a\x99\x68\x01\xbd\x15\x13\xb1\x5c\x8d\xec\x8d\xdf\x2a\x1b\xa5\x4a\x1a\x19\x49\xee\x3b\x24\xa2\x1a\xa1\xbb\x30\x26\x0d\xba\x75\x13\x76\xeb\xd6\xcf\xee\x09\xe1\xaf\xbf\xd6\x35\x2f\xa4\x36\x8f\x3f\xd7\xdc\x22\xb4\xe4\x38\xe2\x32\xe9\x11\xab\x9f\xf4\x2b\xf3\xee\xb1\xad\xe1\xea\xb5\x05\xa4\x0f\x44\xf4\x7c\x48\xfa\x00\x4c\x85\x4f\x0b\xf5\x34\x8e\x2f\x2d\x17\xde\x30\x6d\x50\xa0\xea\x11\x2e\x69\x4c\x06\x65\x19\x1d\xc0\x9c\x72\x6d\xef\x38\x9d\xc9\x38\x7f\x9e\x09\x3b\x1d\xff\xaa\x58\x7d\xa8\x75\x6f\x37\x93\xc5\x69\xf8\x23\xaa\x25\x6a\xa8\xfe\xa3\x02\xde\xd1\x04\x27\xe3\xc5\x69\x68\x41\x54\xb5\x54\x5f\x51\x8b\x37\xa0\xdd\x3b\xa9\x3f\x5b\x9d\x2f\x1e\x1c\x36\xe6\xb6\x3d\x30\x4c\xf2\x67\xaa\xb9\x54\x53\x77\x3c\x85\xef\x6f\xde\x4c\xc6\x6e\xb0\x78\x68\xd8\xaa\xc8\x5f\xfc\x59\x9c\x4b\x36\xde\xd9\x4b\x24\xfe\xca\x2f\x00\xcb\xf5\xa2\xe1\x45\xa6\xec\xf1\xdd\x06\x2f\x5f\x52\xc0\x73\x2b\x1a\x20\xc2\xf6\xf9\x90\x84\xf0\x41\x48\x63\xcf\xf4\x8f\x50\x2a\xad\x1a\xd0\x66\x01\x6c\x5f\x2f\x7d\x63\x8a\x7f\x25\x14\x92\xf9\x27\x02\xb6\xeb\x62\xd1\xfd\x94\x6c\xce\x67\x12\xc2\x85\xfd\x1b\x1c\xdb\xf4\x64\x9c\x8b\x1e\xae\xa9\x6c\x43\x48\x08\xb7\x68\xea\xeb\x3d\xc7\xf8\x76\xfc\xd1\xf4\xc9\x1b\x82\xf0\xce\xfe\xda\x4f\xa1\x5c\xfa\x4f\x23\x51\xd1\x70\x84\xd7\xee\xf7\x7e\x78\x85\xfc\x9f\x86\xcf\x35\x35\xe1\x8d\xe4\xb8\x1f\x9b\x93\x7d\x3e\xb2\xe7\x91\xd7\xeb\x14\x49\x08\xdf\x97\x9f\xfe\x4f\xb8\x57\xf6\x3d\xe1\x45\x71\xda\xef\xf7\x62\xb9\xa4\xc9\x91\xe0\x7e\x4d\xc9\x57\x5f\x7d\xf5\xc7\x84\x3b\xef\xb4\x42\x97\xff\x07\x60\xcd\xc5\x7f\x23\xd2\x2f\x1b\xff\x6d\xc3\x45\xc2\xbf\xa3\x01\xf7\x61\x1b\xfd\xc3\x4b\xd7\xb6\xbd\xb5\xd5\xab\xfc\x74\x10\x8f\x36\x83\x93\x99\x0a\xcb\x33\xd3\x65\x6b\x7e\xfb\x2e\x3d\x58\xae\xf8\x5f\x00\x00\x00\xff\xff\x4b\xb0\x7b\x4b\x48\x20\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 8264, mode: os.FileMode(420), modTime: time.Unix(1587586799, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

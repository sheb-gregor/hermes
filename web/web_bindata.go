// Code generated by forge bindata.
// sources:
// index.html
// DO NOT EDIT!

package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xef\x6e\xdb\x38\x12\xff\xee\xa7\x98\x15\x70\xb0\xdd\xfa\x4f\x92\x36\xdd\xae\x62\x0b\xd8\x4d\x83\xdb\xde\xb5\x49\x91\xa4\x38\x1c\x8a\x62\x41\x4b\x63\x99\x35\x4d\xea\x48\xca\x8e\xf7\x90\x0f\xf7\x88\xf7\x46\x07\x92\x92\x4c\x29\x72\x9c\xed\x76\x17\x17\x20\x71\x4c\xce\x0c\x7f\x9c\xf9\xcd\x0c\xc9\xc9\x77\x6f\xae\xce\x6f\xff\xf9\xe1\x02\x16\x7a\xc5\xa2\xce\x64\x85\x9a\x40\xbc\x20\x52\xa1\x9e\x06\xb9\x9e\x0f\x5f\x07\xe3\xa8\x33\xd1\x54\x33\x8c\xfe\x81\xb3\x1b\x11\x2f\x51\xc3\x2d\x2a\x3d\x19\xbb\xd1\xce\x44\xe9\x2d\x43\x60\x84\xa7\xd3\x20\x56\x2a\x88\x3a\x00\x33\x91\x6c\xe1\xdf\x1d\x00\x80\x19\x89\x97\xa9\x14\x39\x4f\x86\xb1\x60\x42\x86\x20\xd3\x59\xef\xe5\xf7\x03\x38\x3d\x1e\xc0\xe9\x69\xff\xcc\x8a\x79\x73\xc7\x2f\xbe\x1f\xc0\xf1\x8b\x63\xfb\xa7\x98\x9e\x0b\xae\x87\x8a\xfe\x8a\x21\x30\x22\x53\x94\x67\x9d\x0e\xc0\xbd\xf9\xb3\x38\x1e\xc0\xe2\xa4\x58\x4d\xe3\x9d\x1e\x12\x46\x53\x1e\x42\x8c\x5c\x1b\xc1\x42\x8e\xf8\x22\x09\xc6\x42\x12\x4d\x05\xf7\x51\x1d\xbf\x3a\x1d\xc0\xc9\x4b\xf3\xa7\x15\x58\xcb\xf4\x86\x26\x7a\x11\xc2\xf1\xd1\xd1\x5f\xce\x76\xe6\xc5\x1a\xe5\x9c\x89\x4d\x08\xc8\x18\xcd\x14\x55\x85\xf4\x82\x6a\x1c\xaa\x8c\xc4\x18\x02\x17\x1b\x49\x32\x37\xb1\x53\x58\xd0\x24\x41\x5e\xa1\xa6\x3c\xcb\x75\xe9\x4a\x21\x13\x94\x43\x49\x12\x9a\xab\x10\x8e\xce\xbc\xd1\x10\x52\x49\xb6\x6e\xe4\x4b\xae\x34\x9d\x6f\x87\xb1\xe0\x1a\xb9\xf6\x3d\xd1\x16\x0f\x2d\x09\x57\x19\x91\xc8\xb5\x6f\x71\x38\x13\x5a\x8b\xd5\xd0\xc6\x37\x04\x49\x93\x14\xdd\x7c\x46\x92\x84\xf2\x74\xc8\x70\xae\x43\x38\x3e\xc9\x34\x7c\x47\x57\x99\x90\x9a\x94\x26\xbc\x78\xa9\x15\x61\xcc\x8b\xc3\x68\x96\x6b\x2d\x78\xb1\xa7\x76\xc1\x36\x98\x09\x91\x4b\xc5\x88\xc6\x54\xe2\xb6\x06\xb4\x40\x98\x4a\x21\xd6\x05\xc4\x38\x97\xca\x28\x65\x82\xee\xb6\xbe\x22\x32\xa5\x3c\x84\x97\x99\xae\x6d\xc4\x8e\xc0\x2b\x37\xea\x30\xae\x08\xe5\xd6\x7f\x84\x72\x94\x05\xd6\x15\xe5\xc3\x22\xde\xaf\x8f\x8e\xb2\xbb\xba\xd5\x23\x20\xb9\x16\x0d\xc3\x27\x95\x58\x42\x55\xc6\xc8\x36\x84\x39\xc3\x62\xc8\xfc\x37\x4c\xa8\xc4\xd8\x10\x31\x34\x54\xcb\x57\x7c\x4f\x0c\x2d\x69\x86\xc4\xba\x64\x47\xfe\xd1\x8a\x70\x92\xe2\x0a\xb9\x1e\xce\x98\x88\x97\x05\xd4\x27\xac\x26\xc5\xa6\x85\xc2\x95\x61\x5c\x37\x6d\xee\x42\xe2\xd2\xe1\xf4\xf5\x00\x5e\xbd\x18\xc0\xab\x1f\xfa\x75\x12\x0f\x0d\xaf\x43\x98\x49\x24\xcb\xe1\x46\xc8\xe4\xab\x3c\x50\xfa\xd5\xf0\xab\xe1\xd5\xdd\xd0\x1e\x37\xcd\x50\x6f\xd0\xcb\xa2\x62\x37\x0b\x24\x89\x8d\x66\x35\x3e\xa7\xc8\x92\xdf\xec\x33\x4f\x77\xc8\xc9\x0a\x0b\x03\x35\x3a\x95\xbf\x47\x0f\xb8\xe7\xff\xd6\x23\x50\xb2\xc5\xb7\xbf\x26\x2c\xff\x9d\x0b\x38\x73\xc4\xee\x61\x28\xc5\xa6\xb0\xf6\x54\xdf\x31\xca\x97\x43\x46\x66\xc8\xfc\x0a\xfa\x4d\x4a\x9c\x81\x7d\x57\xe6\xd4\xc9\xf1\xa9\xbf\x7d\x65\x22\xe6\x2f\xeb\xd5\x81\x54\xd6\xa3\x2b\xa5\x90\xfb\x64\x25\x26\x4e\x72\x32\xb6\x85\x22\xea\x74\x26\x2a\x96\x34\xd3\xa0\xb7\x19\x4e\x03\xb3\x9d\xf1\x17\xb2\x26\x6e\xd4\x36\x30\x00\x86\x1a\x32\x92\xe2\x8d\x26\x1a\x61\x5a\xd8\x35\x3f\xe3\x31\x6c\xd4\x47\x49\x43\x08\x36\x2a\x1c\x8f\x99\x88\x09\x5b\x08\xa5\xc3\xd7\x47\x3f\x1c\x8d\x7f\xd9\xa8\xb1\xca\x67\xc6\xd8\x0c\x83\x41\xa5\xb6\xd3\x31\x4a\x0b\x94\x2b\x54\xa3\x04\xd7\x23\x96\xdf\x69\x49\x12\x1c\xfd\x6b\x76\xf7\xf2\xe5\x6a\x7d\x27\x47\x1b\x21\x97\x0f\x0c\x55\x96\x48\x6e\xdc\xb5\x03\x64\x63\x22\x96\xc8\x43\x08\xbc\x05\xcd\x8f\x14\xa6\x32\x06\xb9\x42\xd9\x98\x11\x92\x5a\xbe\x34\xe7\xee\x3d\xc4\x38\x53\xb6\xe3\x87\xc0\x73\xc6\x76\x13\x22\xd7\x59\xfe\x60\x34\x66\x48\xf8\xc7\xec\xad\x29\xb8\x6b\xc2\xfc\xe9\xfb\x33\x87\x7e\x9e\x73\xcb\x42\xb0\xf9\xf8\x5e\xa5\xb7\xe2\xe7\xdb\xf7\xef\x7a\xf6\xeb\xdf\x29\x4f\x06\x90\x10\x4d\xfa\xde\xe6\x4c\x1c\x34\x99\x31\x13\x83\xee\x24\xa1\x6b\x88\x19\x51\x6a\x1a\xb8\x94\xfe\xef\x7f\x1c\x7b\x83\xa8\x7b\x56\xe9\xcc\x85\x84\x9e\x51\x5c\xe2\x16\x28\x7f\x60\xd3\x3a\xcc\xda\x7c\xde\x30\x6a\x73\xae\x66\xeb\x80\xac\xcd\xff\x20\x82\xc9\x2c\xea\xc2\x73\xbb\xe0\x73\x08\xc2\xc9\x78\x16\x4d\xc6\x09\x5d\x47\x41\xdd\x14\x9d\x43\xcf\xd0\x4e\xcc\x2d\xaa\x4f\x4b\xdc\x7e\x86\xe9\x14\xba\x62\xf6\x05\x63\xdd\x6d\xc2\x3c\xb4\xbc\x2d\x0f\x81\x5d\xfb\x6f\x37\x57\x97\x23\xa5\x25\xe5\x29\x9d\x6f\x7b\x95\xf9\x81\x0b\x04\x74\xbb\x7d\x83\xad\x15\xd6\x3d\x20\x53\xf8\xf5\x6b\xef\xf6\xb2\x77\x85\x7d\x1e\xb5\xc2\x9e\xc3\x77\x82\x2d\x42\xd5\x9c\x44\x9d\x4b\xde\xc6\x08\x57\xe4\x4d\x48\x54\x46\x78\x39\xb7\xab\x26\x41\x04\x06\x71\x45\x39\x78\x0e\xdd\x10\x26\x63\x23\x1d\x41\xb1\x12\x3c\x77\xab\x3b\xf6\x36\xc8\xbb\x91\x54\xe3\xad\xb8\x89\x4d\x15\xea\xad\x50\x29\x92\x62\x93\xb3\x99\x34\x8c\x4d\x44\x9c\x9b\xe6\x3c\x8a\x25\x12\x8d\x17\xcc\xb6\xea\x5e\x90\xd0\x75\xd0\xdf\xed\x39\x93\x38\x52\xa8\x7f\xd4\x5a\xd2\x59\xae\xb1\xd7\xb5\xb0\xbb\x03\xe8\xfa\x7d\x18\xd7\xdd\x86\x12\xe5\x1c\xa5\x49\x21\x98\x42\x01\xc4\x13\x28\xcb\xd7\xc8\x25\xec\x28\x93\x98\x21\x4f\x7a\x99\xc4\xc2\x4e\x73\x6b\x89\xb8\x31\x02\x2d\x7b\xaa\x6f\xba\x91\xbf\xc1\xcd\xc5\xe5\x6d\x30\x28\x21\xf4\xfb\x6d\x20\xaa\x72\x62\x4a\x7b\xd2\x6b\xd0\xb5\xa1\x7a\xdf\x69\x20\x13\xfc\x2a\xb3\x0b\xeb\xfd\xa8\x82\xf3\xab\xcb\xcb\x8b\xf3\xdb\x8b\x37\xbe\x73\x4d\x34\xbe\x28\xc1\x6b\x45\xdc\xfc\xc4\x0b\xc2\x39\x32\x5b\x93\x7f\x51\x9a\xe8\x5c\x35\x8a\xa4\xdd\x66\x08\xc1\x82\xf0\x44\x2d\xc8\x12\x83\x1d\x4d\x3d\x32\x16\x5e\x33\x8b\xf4\xbd\xe1\x43\xe0\x9a\xce\x17\xfc\xc2\x34\xb2\xc7\xf7\xd8\xad\xd1\xda\xeb\x7c\x41\x74\x71\x7d\x7d\x75\x1d\x96\x4c\x76\x24\xd7\x23\x5b\xfc\xf6\x2d\x78\xce\x84\xc2\x03\x4e\x7d\xf3\xf6\xe6\x09\xd0\xdf\xbb\xf8\x35\x6d\x19\xe7\x4b\x54\x99\xe0\xca\xe4\x83\x0d\x7a\x66\x6e\x98\xbd\x0a\xdb\x3e\x87\x35\x38\xd6\xbd\xbe\xb8\xf9\x70\x75\x79\x73\xd1\x1d\x54\x16\xfb\xbe\xbb\x4d\x69\x2d\x27\xdc\x81\x0f\xa6\xd3\x29\x04\x19\xe5\x69\xd0\xac\xab\x7b\x49\xe1\x87\x3d\x13\x3c\x6d\x30\x62\x1f\x6f\xea\xb5\xae\x5e\xfa\xea\xf4\xa8\x84\x3a\xed\x44\x8f\x05\xe7\x18\xeb\x9e\x8f\xb8\x2a\x23\x29\xea\xa2\x86\xfc\xb4\x7d\x9b\xf4\x82\x5c\x32\x53\x86\x83\xbe\xab\x04\xb7\x78\xa7\x61\xea\xe7\x9c\x39\x74\x9c\x1d\xb6\x63\x8f\x0f\x41\x7f\xe4\x4e\x9b\xbe\x05\x73\xd8\x18\xd9\xe9\x27\x98\x31\xc7\x8d\xfd\x56\xcc\xec\x13\x8c\xb8\x93\xc9\x7e\x33\x6e\xde\x0b\x7c\xb3\xce\xf9\x75\xf7\x81\x71\x2b\x11\x3c\x5e\xa0\x60\x0a\x1c\x37\x50\xbd\x78\xf4\x1a\x0e\x3d\x50\xde\x04\x17\x19\x1a\x66\xb9\x9a\x75\x40\x36\x36\x29\x68\x85\x6d\x32\x1e\x90\x2e\xca\xa4\x95\x2f\x52\xee\x80\x86\x2d\x11\x56\xde\x56\x97\x3d\xa4\x73\x67\xb7\x5e\x33\x75\x6d\x26\xa8\x76\x87\xaa\x9f\xb6\xe7\xa6\x0a\x5d\x92\x15\xf6\xba\xf5\xde\xb4\x59\x50\x86\xe0\x52\x58\x7d\x3a\xfa\xdc\x4c\xbf\x6a\x62\xe4\x1e\x1e\x2e\x45\x82\x23\x89\x2b\xb1\xc6\xf3\x05\x65\x89\xa7\xd9\x38\x18\x3c\x80\xae\x50\x7f\x94\xac\x86\xbc\x11\xae\xc7\xf8\x90\x4b\x56\x32\xad\x95\x51\x3b\x4f\xda\x38\xf5\xfa\x87\x78\x93\x33\xd6\xe9\x34\xcf\xc4\x3d\xcf\x35\x55\x7e\xef\x69\x74\x86\xe3\x42\xd2\x5f\xf1\x41\x30\x6c\x16\x3e\xb6\x99\x5a\x16\xd7\x1b\xa0\x4b\x9a\x47\x33\xa3\x96\x76\x75\x6d\x93\xb9\x8f\xe9\xfa\x79\xdf\xea\x46\xb3\x29\x53\x6a\x2d\xc2\x41\x81\x66\x60\xed\xb6\x34\xd2\xaf\x6d\xd3\x95\xeb\x1a\xf3\xb1\x58\xad\x08\x4f\xc2\xf6\xf5\xbd\xbb\xcf\x9e\xee\x56\xdd\xc2\x1e\x84\xa4\xc0\xf6\x98\x6f\x0a\x91\x76\xc7\x16\x6d\x6a\xbf\xb6\x15\xf0\x5c\xfb\xad\x5c\xd5\x76\x43\xad\xbb\xaa\xb0\x35\x70\x2a\x4f\xf0\x52\x8a\xfa\x9c\xc4\x0b\x6c\x74\xae\xdf\x05\x33\x36\x06\xf7\x42\x7c\xd0\x99\x83\x58\x67\x23\x2e\x34\x9d\xd3\xd8\xbe\xee\xaa\x91\x7d\x22\x54\xc1\xc3\xab\xf1\x1e\x79\x12\xc7\x22\xe7\xba\x4d\xe3\xbe\xcd\x05\xc5\x03\x0e\x4f\xc4\x66\x44\x92\xe4\xc2\x00\x7f\x47\x95\x46\x8e\xb2\x17\x30\x41\x92\x60\x50\xe6\xfc\x00\xe6\x84\x29\x73\xf6\xee\x4c\xc6\xee\xb5\x21\xea\x74\xfc\x2b\x4c\xfd\xdd\xd1\x3e\x45\x4c\x16\x27\xd1\xcf\xf6\xb5\x00\xea\x4f\xf0\xf0\x81\xa4\x38\x19\x2f\x4e\x22\x03\xa2\x6e\xa5\xfe\x28\x58\x3c\x69\x3c\xbc\x2b\xf9\xb3\xf5\xf9\xe2\x22\x5c\xed\x78\xdf\xc5\x77\xe2\x5e\x5d\xe6\x42\x4e\x6d\x2d\x8d\x3e\x5e\xbf\x9b\x8c\xed\x60\x71\x01\xde\x99\x70\x6f\xd9\x34\x71\x92\xad\x77\xc9\x12\x89\xaf\xf9\x0d\x60\xd9\x33\x52\x74\x9e\x4b\xd3\x6b\xf6\xc1\x73\x2a\x05\x3c\xab\xd1\x02\x11\x76\xaf\x61\x41\x04\x9f\xb8\xd0\xa6\x01\x7d\x86\xd2\x68\x7d\x03\xfb\x76\x00\xbb\xc7\x38\x7f\x33\xc5\xcb\x78\x21\xe9\xbe\x05\x60\x8e\x08\x34\x5e\x4e\x83\xaa\x99\x04\x11\x9c\x9b\xff\xc1\xb2\x4d\x4d\xc6\x4e\xf4\xe9\x96\xca\x9e\x19\x44\x70\x83\xba\xa9\xef\x39\xc6\xdf\xc7\x1f\x4d\x1f\xd7\xbd\xa2\x5b\xf3\x71\x98\x42\x4e\xfa\x4f\x23\x51\xd1\x1d\xa3\x2b\xfb\x79\x18\x5e\x21\xff\xa7\xe1\xb3\x1d\x38\xba\x16\x0c\x0f\x63\xb3\xb2\x5f\x8f\xec\xeb\xc8\xeb\x1d\x6b\x82\x08\x7e\x2c\xbf\xfd\x9f\x70\xaf\x6c\xd2\xd1\x79\xd1\x9a\x0e\x7b\xb1\x54\x69\x73\x24\xd8\x8f\x69\xf0\xec\xd9\xb3\x3f\x26\xdc\xee\x58\x10\xd9\xfc\x7f\x02\x56\x27\xfe\x1b\x91\x7e\xdb\xf8\xef\x4e\x07\x41\xf4\x57\xd4\x60\xbf\xec\xa2\xff\xf4\xd2\xb5\x3b\x8b\x99\xea\x55\x7e\x7b\x12\x8f\xaa\xc1\xc9\x4c\x46\x65\xcf\xb4\xd9\xea\x6e\x85\xa5\x07\x4b\x8d\xff\x05\x00\x00\xff\xff\x8a\x71\xc4\xe3\x22\x1f\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 7970, mode: os.FileMode(420), modTime: time.Unix(1587551273, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

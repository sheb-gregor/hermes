// Code generated by forge bindata.
// sources:
// index.html
// DO NOT EDIT!

package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x6f\x6f\xdb\x38\xd2\x7f\xef\x4f\x31\x4b\x3c\xcf\xda\x6e\xfc\x27\x49\x9b\x6e\x57\xb1\x05\xec\xa6\xc1\xb5\x77\x6d\x52\x24\x29\x0e\x87\xa2\xd8\xa5\xa5\xb1\xcd\x86\x26\x05\x92\x8a\xeb\x5d\xe4\xc5\x7d\xc4\xfb\x46\x07\x52\x92\x45\xc9\x72\xec\xa6\xdd\xbd\x0d\x90\x38\x22\x87\xc3\xdf\xcc\xfc\x66\x86\xa2\x47\xdf\xbd\xbc\x3c\xbb\xf9\xd7\xbb\x73\x98\x9b\x05\x0f\x5b\xa3\x05\x1a\x0a\xd1\x9c\x2a\x8d\x66\x4c\x52\x33\xed\xbf\x20\xc3\xb0\x35\x32\xcc\x70\x0c\xff\x89\x93\x6b\x19\xdd\xa2\x81\x1b\xd4\x66\x34\xcc\x46\x5b\x23\x6d\x56\x1c\x81\x53\x31\x1b\x93\x48\x6b\x12\xb6\x00\x26\x32\x5e\xc1\xef\x2d\x00\x80\x09\x8d\x6e\x67\x4a\xa6\x22\xee\x47\x92\x4b\x15\x80\x9a\x4d\x3a\xcf\x7e\xe8\xc1\xc9\x51\x0f\x4e\x4e\xba\xa7\x4e\xcc\x9b\x3b\x7a\xfa\x43\x0f\x8e\x9e\x1e\xb9\x3f\xf9\xf4\x54\x0a\xd3\xd7\xec\x37\x0c\x80\x53\x35\x43\x75\xda\x6a\x01\xdc\xdb\x3f\xf3\xa3\x1e\xcc\x8f\xf3\xdd\x0c\x7e\x36\x7d\xca\xd9\x4c\x04\x10\xa1\x30\x56\x30\x97\xa3\xbe\x48\x8c\x91\x54\xd4\x30\x29\x7c\x54\x47\xcf\x4f\x7a\x70\xfc\xcc\xfe\x69\x04\xd6\x30\xbd\x64\xb1\x99\x07\x70\x74\x78\xf8\xff\xa7\xa5\x7a\x79\x87\x6a\xca\xe5\x32\x00\xe4\x9c\x25\x9a\xe9\x5c\x7a\xce\x0c\xf6\x75\x42\x23\x0c\x40\xc8\xa5\xa2\x49\x36\x51\x2e\x98\xb3\x38\x46\xb1\x46\xcd\x44\x92\x9a\xc2\x95\x52\xc5\xa8\xfa\x8a\xc6\x2c\xd5\x01\x1c\x9e\x7a\xa3\x01\xcc\x14\x5d\x65\x23\x9f\x52\x6d\xd8\x74\xd5\x8f\xa4\x30\x28\x8c\xef\x89\xa6\x78\x18\x45\x85\x4e\xa8\x42\x61\x7c\x8d\xfd\x89\x34\x46\x2e\xfa\x2e\xbe\x01\x28\x16\xcf\x70\x23\x18\x7a\x41\x39\x2f\x54\x3f\xe0\xfc\xc1\x24\x35\x46\x8a\xdc\x90\x6d\x0a\x36\xb1\xc5\x54\xdd\x6a\x4e\x0d\xce\x14\xae\x2a\xe8\x72\x58\x33\x25\xe5\x5d\x8e\x2b\x4a\x95\xb6\x8b\x12\xc9\x4a\x7b\x17\x54\xcd\x98\x08\xe0\x59\x92\x5b\x97\xd0\x38\x66\x62\xe6\x46\xe0\x79\x36\x9a\x61\x5c\x50\x26\x9c\xd3\x28\x13\xa8\x72\xac\x0b\x26\xfa\x79\x90\x5f\x1c\x1e\x26\x9f\xab\x5a\x0f\x81\xa6\x46\xd6\x14\x1f\xaf\xc5\x62\xa6\x13\x4e\x57\x01\x4c\x39\xe6\x43\xf6\xbf\x7e\xcc\x14\x46\x96\x7d\x81\xe5\x57\xba\x10\x5b\x02\xe7\x98\xd2\xa7\xce\x25\x25\xe3\x07\x0b\x2a\xe8\x0c\x17\x28\x4c\x7f\xc2\x65\x74\x9b\x43\xdd\x63\x37\x25\x97\x0d\xbc\x5d\x2b\xc6\xbb\xba\xce\x32\x24\x59\x0e\x9c\xbc\xe8\xc1\xf3\xa7\x3d\x78\xfe\x63\xb7\xca\xdc\xbe\x25\x73\x00\x13\x85\xf4\xb6\xbf\x94\x2a\x7e\x94\x07\x0a\xbf\x1e\x1d\x6f\x84\xab\x1c\xda\xe2\xa6\x09\x9a\x25\x7a\xa9\x93\x5b\x33\x47\x1a\xbb\x68\xae\xc7\xa7\x0c\x79\xfc\xc5\x3e\xf3\xd6\xf6\x05\x5d\x60\xae\xa0\x42\xa7\xe2\xf7\x70\x83\x7b\xfe\x6f\x35\x02\x05\x5b\x7c\xfd\x77\x94\xa7\x5f\xb9\x41\xa6\x8e\x3a\x1b\xfa\x4a\x2e\x73\x6d\xfb\xfa\x8e\x33\x71\xdb\xe7\x74\x82\xdc\x2f\x9b\xdf\xa4\xae\x59\xd8\x9f\x8b\x9c\x3a\x3e\x3a\xf1\xcd\xd7\x36\x62\xfe\xb6\x5e\x1d\x98\xa9\x6a\x74\x95\x92\x6a\x9b\xac\xc2\xb8\x94\xfc\xa4\xa5\xe8\xc7\xd4\x14\x1d\xa0\x82\x36\x51\xd8\x2f\xf0\xde\xb7\x46\x43\x57\x57\xc2\x56\x6b\xa4\x23\xc5\x12\x03\x66\x95\xe0\x98\x58\xeb\x87\x9f\xe8\x1d\xcd\x46\x5d\x93\x03\xe0\x68\x20\xa1\x33\xbc\x36\xd4\x20\x8c\x73\xf5\x6e\x0b\xfd\x5e\xb1\x00\xc8\x52\x07\xc3\x21\x97\x11\xe5\x73\xa9\x4d\xf0\xe2\xf0\xc7\x43\xd2\xf3\xa4\xae\xd3\xe9\x94\x7d\x0e\x80\x0c\x7f\x59\xea\xa1\x4e\x27\x56\xff\x04\x3d\x19\x9a\x5a\x37\x95\x9a\x5d\x2c\xe4\x2d\x8a\x00\x88\x27\x66\x7f\x94\xb4\x15\x91\xa4\x1a\x55\x6d\x46\x2a\xe6\x78\x52\x9f\xbb\xf7\xb0\xe0\x44\xbb\xf6\x1e\x80\x48\x39\x2f\x27\x64\x6a\x92\x74\x63\x34\xe2\x48\xc5\xfb\xe4\xb5\x2d\xb4\x77\x94\xd7\xa7\xe7\x2c\xc6\x77\x8e\xb5\x53\xca\x35\xba\xf1\x7b\x57\x68\x00\xa6\xa9\x70\xac\x04\x97\x9f\x6f\xf5\xec\x46\xbe\xba\x79\xfb\xa6\xe3\x1e\xff\xc1\x44\xdc\x03\x1b\xac\xae\x67\xb4\x75\xb4\xa1\x13\x6e\x9d\xdc\x1e\xc5\xec\x0e\x22\x4e\xb5\x1e\x93\x2c\xc5\xff\xf3\xef\x8c\xcd\x24\x6c\x9f\xae\xd7\x4c\xa5\x82\x8e\x5d\x78\x8b\x2b\x60\x62\x43\xa7\x73\xa4\xd3\x79\x50\x53\xea\x72\xb0\xa2\x6b\x87\xac\xab\x07\x24\x84\xd1\x24\x6c\xc3\x81\xdb\xf0\x00\x48\x30\x1a\x4e\xc2\xd1\x30\x66\x77\x21\xa9\xaa\x62\x53\xe8\x58\x5e\xc9\xa9\x43\xf5\xe1\x16\x57\x1f\x61\x3c\x86\xb6\x9c\x7c\xc2\xc8\xb4\xeb\x30\x77\x6d\x9f\x95\x8b\x35\xcd\x89\x43\xf1\xf7\xeb\xcb\x8b\x81\x36\x8a\x89\x19\x9b\xae\x3a\xeb\x8d\x7a\x90\x8a\x18\xa7\x4c\x60\xdc\x83\x67\x5d\x8b\xb4\x11\xe4\x3d\x20\xd7\xf8\x18\x24\xd9\xfe\xa5\x65\x5b\x77\xd8\xe6\x5f\x27\xec\xb9\xbf\x14\x6c\x10\x5a\xcf\x29\x34\xa9\x12\x4d\xfc\xc8\x5a\x80\x0d\x90\x4e\xa8\x28\xe6\xca\x5a\x43\x42\xb0\x88\xd7\x04\x84\x03\x68\x07\x30\x1a\x5a\xe9\x10\xf2\x9d\xe0\x20\xdb\x3d\xe3\x72\x8d\xca\x4b\xc5\x0c\xde\xc8\xeb\xc8\xd6\xa8\xce\x02\xb5\xa6\x33\xac\x33\x38\x51\x96\xbf\xb1\x8c\x52\xdb\xba\x07\x91\x42\x6a\xf0\x9c\xbb\x46\xde\x21\x31\xbb\x23\xdd\xd2\xe6\x44\xe1\x40\xa3\xf9\xc9\x18\xc5\x26\xa9\xc1\x4e\xdb\xc1\x6e\xf7\xa0\xed\x77\x69\xbc\x6b\xd7\x16\x31\x21\x50\xd9\x84\x82\x31\xe4\x40\x3c\x81\xa2\x5a\x0d\xb2\xb4\x1e\x24\x0a\x13\x14\x71\x27\x51\x98\xeb\xa9\x9b\x16\xcb\x6b\x2b\xd0\x60\x93\xa5\x71\x3e\x9c\xf5\x5a\xf8\xce\x92\x38\x61\x62\xd6\x86\xef\xbf\x87\xa6\x39\x29\x66\x1b\xf4\xae\x3a\xaf\x56\x15\xc8\xf5\xf9\xc5\x0d\xe9\x15\xca\xba\xdd\x26\x5a\x94\x66\xad\xcb\x98\x6d\x25\x71\xa7\x96\x04\x35\x25\xf7\xad\x9a\xad\x52\x5c\x26\x0e\x82\xf1\x31\x56\xf1\x91\xb3\xcb\x8b\x8b\xf3\xb3\x9b\xf3\x97\x7e\xb8\x6c\x7c\x6d\x02\x56\xba\x80\xfd\x89\xe6\x54\x08\xe4\xae\x17\xfc\xa2\x0d\x35\xa9\xae\x15\x67\x67\x70\x00\x64\x4e\x45\xac\xe7\xf4\x16\x49\x69\xa1\x47\xef\x3c\x0e\x76\x93\xae\x37\xbc\x0b\x5c\x3d\x9c\x52\x9c\xdb\xc6\xf9\xb0\x8d\xed\x4a\xa2\x78\x9d\x96\x84\xe7\x57\x57\x97\x57\x41\x91\x1b\x59\xda\x98\x81\x2b\xae\xdb\x36\x3c\xe3\x52\xe3\x0e\xa7\xbe\x7c\x7d\xbd\x07\xf4\xb7\x59\xfc\xea\xba\xac\xf3\x15\xea\x44\x0a\x6d\x33\xcc\x05\x3d\xb1\xaf\xb1\x9d\x35\xb6\x0a\x69\x0b\xd9\x46\xd6\x36\x4e\x7e\x31\x6d\xdb\x57\xe7\xd7\xef\x2e\x2f\xae\xcf\xdb\xbd\xb5\xc6\x2a\x77\x1f\x42\x34\x1e\x8f\x81\x58\x44\xa4\xbe\xe9\x56\x9e\xf9\x4c\xb2\x70\x6b\x24\xdb\x46\xc5\x6a\x41\xae\xd6\xe7\x2a\xe3\x6a\xc8\x37\x72\x27\x92\x42\x60\x64\x3a\x3e\xe2\x75\xad\x9b\xa1\xc9\x0b\xdd\xcf\xab\xd7\x71\x87\xa4\x8a\xdb\x5e\x41\xba\x59\xb9\xba\xc1\xcf\x06\xc6\x7e\x1a\xdb\xf3\xd3\xe9\x6e\x3d\xee\x24\x44\xba\x83\xac\x03\xfa\x1a\xec\xb9\x69\xe0\xa6\xf7\x50\x63\x4f\x4e\xdb\xb5\xd8\xd9\x3d\x94\x64\x87\xac\xed\x6a\xb2\x79\x2f\x75\xeb\xc5\xd8\x6f\x0e\x1b\xca\x9d\x44\xa5\x41\x6c\xd6\x3c\x18\x83\xc0\x25\xac\x6f\x6a\x3a\x35\x87\xc2\x41\xc5\xc5\xd9\xe1\xf3\x61\x95\x03\x29\x64\x82\x96\x6e\x59\x6d\xdc\x21\x1b\xd9\x54\x77\xc2\x2e\xe9\x77\x48\xe7\xe5\xd8\xc9\xe7\xa9\xbd\x63\x85\x2b\x45\x4e\xde\x55\xb1\x2d\x4c\xcc\xce\xa6\x9d\x7a\x89\x70\xe9\xa1\x9b\xbd\xac\x7f\x5e\x9d\xd9\x6a\x77\x41\x17\xd8\x69\x57\xbb\xea\x72\xce\x38\x42\x96\xe1\xfa\xc3\xe1\xc7\x7a\x4e\xae\x27\x06\xd9\x2d\xca\x85\x8c\x71\xa0\x70\x21\xef\xf0\x6c\xce\x78\xec\xad\xac\xf5\xae\x0d\xe8\x1a\xcd\x7b\xc5\x2b\xc8\xeb\x31\x7c\x80\x24\xa9\xe2\x05\xfd\x1a\x69\x56\x7a\xd2\xc5\xa9\xd3\xdd\x45\xa6\x94\xf3\x56\xab\x7e\xe6\xef\x78\xae\x59\x27\xfd\x96\x86\x6a\x89\x2f\x15\xfb\x0d\x37\x82\xe1\x52\xf3\x21\x63\x2a\xa9\x5d\x6d\xb4\x59\x26\x3d\x98\x2e\x95\x5c\xac\xae\xb6\xe9\xfc\xd0\x5a\xbf\x18\x34\xba\xd1\x1a\x65\xeb\xaf\x43\xd8\xcb\xd1\xf4\x9c\xde\x86\x86\xfd\xd8\xe3\xc0\xda\x75\xb5\xf9\x48\x2e\x16\x54\xc4\x41\xf3\xfe\xde\xbb\xdd\x96\x2e\xba\x7e\xc9\xdc\x08\x49\x8e\xed\x21\xdf\xe4\x22\xcd\x8e\xcd\x7b\xd7\xf6\xd5\x4e\xc0\x73\xed\xb7\x72\x55\xd3\x7b\x73\xd5\x55\xb9\xae\x5e\xb6\x64\x0f\x2f\x2d\xec\x91\xbb\xb1\x80\xec\x34\xb0\x6f\x64\xdf\x2e\x6f\xe0\xd0\x57\xda\xe9\xb4\x6e\x33\x71\x5f\xcb\x8a\x57\xf3\x2d\x45\xa6\x98\x86\x31\x7c\xb7\x39\xda\xa8\x71\x86\xe6\x8c\x46\x73\xac\xb5\xfe\xaf\x32\x35\xb2\x0a\xb7\xda\xba\x71\xb4\x21\x91\x49\x06\x42\x1a\x36\x65\x91\xbb\xd6\xd7\x03\x77\x4d\xac\xc9\xe6\x35\xc9\x16\x79\x1a\x45\x32\x15\xa6\x69\xc5\xfd\x36\xa7\xea\x25\x33\xd1\x1c\x3a\x4b\x26\x62\xb9\x1c\x70\x99\x29\x1b\x24\x4a\x1a\x19\x49\xee\x3b\x24\xa2\x1a\xa1\x3d\x37\x26\x09\xda\x75\x13\x36\x6b\xfc\xaf\xee\xe6\xe8\xff\x7e\xaf\x6b\x9e\x4b\x6d\xee\x7f\xad\xb9\x45\x68\xc9\x71\xc0\xe5\xac\x43\xac\x7e\xd2\xad\xcc\xbb\x2b\xd9\x86\x97\xa6\x12\x90\xde\x13\xd1\xe3\x21\xe9\x3d\x30\xe5\x3e\xcd\xd5\xd3\x38\x3e\xb7\x5c\x78\xc3\xb4\x41\x81\xaa\x43\xb8\xa4\x31\xe9\x15\x2d\xa7\x97\xdd\x2c\xd9\x57\xa1\xd1\x30\xbb\x95\x0b\x5b\x2d\xff\xdd\xbf\x7a\x9d\xef\xae\xec\x46\xf3\xe3\xf0\x15\xaa\x05\x6a\xa8\x7e\x9d\x05\xef\xe8\x0c\x47\xc3\xf9\x71\x68\x41\x54\xb5\x54\xef\xda\xf3\xab\xbf\xcd\x4b\x06\x7f\xb6\x3a\x9f\xdf\x27\xad\xcd\xdd\x76\x7f\x34\xca\x2e\x33\xa7\x52\x8d\x5d\x2b\x0f\xdf\x5f\xbd\x19\x0d\xdd\x60\x7e\x8f\x54\xaa\xc8\xbe\x17\x62\x71\x26\xd9\x78\x09\x53\x20\xf1\x57\x7e\x03\x58\xee\xdc\x1e\x9e\xa5\xca\x1e\x75\xb6\xc1\xcb\x96\xe4\xf0\xdc\x8a\xa6\x1b\xab\xf2\x92\x99\x84\xf0\x41\x48\x63\xcf\x3f\x1f\xa1\x50\x5a\x35\x60\x9b\x05\x50\xde\x71\xfb\xc6\xe4\x5f\x38\xe5\x92\xd9\x13\x01\x7b\x42\x65\xd1\xed\x98\xac\xcf\x32\x24\x84\x33\xfb\x3f\x38\xb6\xe9\xd1\x30\x13\xdd\x5f\x53\x71\x64\x23\x21\x5c\xa3\xa9\xaf\xf7\x1c\xe3\xdb\xf1\x47\xd3\x27\x3b\x3c\x85\x37\xf6\x63\x37\x85\x32\xe9\x3f\x8d\x44\xf9\xe1\x2c\xbc\x74\x9f\xbb\xe1\xe5\xf2\x7f\x1a\x3e\x77\x00\x0c\xaf\x24\xc7\xdd\xd8\x9c\xec\xe3\x91\x3d\x8e\xbc\xde\xa9\x9a\x84\xf0\x53\xf1\xf4\x17\xe1\x5e\x71\x46\x0c\xcf\xf2\x6e\xbf\xdb\x8b\xc5\x92\x26\x47\x82\xfb\x18\x93\x27\x4f\x9e\xfc\x31\xe1\xce\x4e\xa5\xa1\xcb\xff\x3d\xb0\x66\xe2\x5f\x88\xf4\xdb\xc6\xbf\x3c\x70\x91\xf0\x6f\x68\xc0\x3d\x94\xd1\xdf\xbf\x74\x95\xaf\x02\xb6\x7a\x15\x4f\x7f\x11\x1e\x55\x0f\xd3\x5f\x16\x9f\xf5\xb2\xff\x69\x9c\xca\xa3\x36\x09\xe1\x15\x8b\x11\xec\xd3\x97\xb7\x98\xec\x65\x84\x84\xf0\x36\x35\xfb\x45\x67\x3d\x38\x9a\xa8\xb0\x38\xd1\xb8\x5a\x9a\xdd\x23\x15\xfe\x2b\x56\xfc\x37\x00\x00\xff\xff\x61\xce\x10\x4c\x0c\x24\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 9228, mode: os.FileMode(420), modTime: time.Unix(1589157219, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
